{"version":3,"sources":["utils/capitalizeText.jsx","components/DailyWeatherBlock/OverallInfo.jsx","utils/createImageUrl.jsx","components/DailyWeatherBlock/DetailedInfo.jsx","components/DailyWeatherBlock/DailyChart.jsx","services/WeatherDataParser.jsx","components/DailyWeatherBlock/index.jsx","components/WeeklyWeatherList/SingleDayBlock.jsx","components/WeeklyWeatherList/index.jsx","components/WeatherBlock.jsx","components/Header.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["capitalizeText","string","charAt","toUpperCase","slice","OverallInfo","_ref","cityInfo","currentDay","description","cityName","country","weatherDescription","react_default","a","createElement","reactstrap_es","className","weatherMain","defaultProps","descritpion","createImageUrl","imgCode","replace","DetailedInfo","buttonName","onButtonClick","this","props","activeButtonChart","currentDateTimeWeather","humidity","pressure","temperature","wind","xs","src","alt","name","size","onClick","handleOnClick","bind","Component","DailyChart","selectedDateWeather","AreaChart","data","height","margin","top","width","XAxis","axisLine","dataKey","interval","padding","left","right","minTickGap","tickLine","tick","stroke","fontSize","Area","animationDuration","animationEasing","fill","label","position","strokeWidth","type","WeatherDataParser","getCityOverallInfo","jsonData","city","getCurrentTimeDailyWeather","hourlyArrays","undefined","Math","round","getFiveDaysForecast","fiveDayForecastArray","days","forecast","previousDay","forEach","dailyForecast","currentDateTime","Date","dt","currentDate","getDate","getDay","currentDayName","hourlyForecast","push","getMinAndMaxTemperatureForPassedDay","dailyTemperatures","map","el","main","temp","min","apply","Object","toConsumableArray","max","prepareDataForChart","arguments","length","hourlyTemperatures","hour","getHours","value","hourlyPressure","hourlyWind","speed","state","setState","selectedDayForecast","overallCityInfo","selectedDateChartData","setActiveButtonChart","DailyWeatherBlock_OverallInfo","DetailedInfo_DetailedInfo","DailyWeatherBlock_DailyChart","SingleDayBlock","dayName","onSelect","blockIndex","isActive","dailyWeatherInfo","weather","icon","temperatures","blockClass","substr","activeId","index","selectedDay","setCurrentDay","onDaySelect","fiveDaysForecast","SingleDaysBlock","keys","key","SingleDayBlock_SingleDayBlock","WeatherBlock","getTime","_this","_this2","axios","get","forecast5","then","response","apiWeatherData","list","catch","error","console","log","components_DailyWeatherBlock_default","WeeklyWeatherList_default","Header","App","Header_Header","WeatherBlock_WeatherBlock","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ubAAaA,iBAAiB,SAASC,GAEnC,OAAOA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,YCWzD,SAASC,EAATC,GAA4D,IAArCC,EAAqCD,EAArCC,SAAUC,EAA2BF,EAA3BE,WAAYC,EAAeH,EAAfG,YAMrCC,EAAWH,EAAQ,KACnBI,EAAUJ,EAAQ,QAClBK,EAAqBH,EAC3B,OACEI,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,MAAIE,UAAU,aAAaP,EAA3B,KAAuCC,GACvCE,EAAAC,EAAAC,cAAA,SAAIf,EAAeQ,IACnBK,EAAAC,EAAAC,cAAA,SAAIH,EAAmBM,YAAvB,KAAsCN,EAAmBA,sBApBjEP,EAAYc,aAAe,CACzBZ,SAAU,GACVC,WAAY,GACZY,YAAa,IAyBAf,QCnCFgB,EAAiB,SAASC,GAGrC,MADe,8CACCC,QAAQ,SAAUD,ICIfE,gMAWLC,IAEZC,EADsBC,KAAKC,MAAMF,eACnBD,oCAId,IAAII,EAAoBF,KAAKC,MAAMC,kBAC/BC,EAAyBH,KAAKC,MAAME,uBACpCC,EAAWD,EAAsB,SACjCR,EAAUQ,EAAsB,QAChCE,EAAWF,EAAsB,SACjCG,EAAcH,EAAsB,YACpCI,EAAOJ,EAAsB,KAEjC,OACEjB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,UAAU,gBACbJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKmB,GAAG,KACNtB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACXmB,IAAKf,EAAeC,GACpBe,IAAI,sBAGRxB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kCACbJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,oCAAoCgB,GACpDpB,EAAAC,EAAAC,cAAA,QAAME,UAAU,uBAAhB,mBAGJJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKmB,GAAG,KACNtB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,yBACbJ,EAAAC,EAAAC,cAAA,sBAAcgB,EAAd,MACAlB,EAAAC,EAAAC,cAAA,sBAAciB,EAAd,QACAnB,EAAAC,EAAAC,cAAA,kBAAUmB,EAAV,QACArB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,UAAiC,sBAAtBY,EAA4C,SAAW,GAClES,KAAK,oBACLC,KAAK,KACLC,QAASb,KAAKc,cAAcC,KAAKf,KAAM,sBAH/C,eAMAd,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,UAAiC,mBAAtBY,EAAyC,SAAW,GAC/DS,KAAK,iBACLC,KAAK,KACLC,QAASb,KAAKc,cAAcC,KAAKf,KAAM,mBAH/C,YAMAd,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,UAAiC,eAAtBY,EAAqC,SAAW,GAC3DS,KAAK,aACLC,KAAK,KACLC,QAASb,KAAKc,cAAcC,KAAKf,KAAM,eAH/C,mBAxD4BgB,cAArBnB,EAMZL,aAAe,CACpBU,kBAAmB,GACnBC,uBAAwB,mCC+Cbc,MArDf,SAAAtC,GAAgE,IAA1CuC,EAA0CvC,EAA1CuC,oBAcpB,OAd8DvC,EAArBuB,kBAevChB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CACEC,KAAMF,EACNG,OAAQ,IACRC,OAAQ,CAAEC,IAAK,IACfC,MAAO,KAEPtC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CACEC,UAAU,EACVC,QAAQ,OACRC,SAAS,mBACTC,QAAS,CAAEC,KAAM,GAAIC,MAAO,IAC5BC,WAAY,EACZC,UAAU,EACVC,KAAM,CACJC,OAAQ,UACRC,SAAU,MAGdlD,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CACEC,kBAAmB,IACnBC,gBAAgB,UAChBZ,QAAQ,QACRa,KAAK,yBACLC,MAAO,CACLD,KAAM,UACNJ,SAAU,KACVM,SAAU,OAEZP,OAAO,UACPQ,YAAY,IACZC,KAAK,wBC6CAC,EApGW,CACxBC,mBAAoB,SAASC,GAC3B,MAAO,CACLpC,KAAQoC,EAASC,KAAKrC,KACtB3B,QAAW+D,EAASC,KAAKhE,UAI7BiE,2BAA4B,SAASC,GACnC,YAAqBC,IAAjBD,EACK,GAGK,CACZvD,QAAWuD,EAAa,GAAb,QAA2B,GAA3B,KACX9C,SAAY8C,EAAa,GAAb,cACZ7C,SAAY6C,EAAa,GAAb,cACZ5C,YAAe8C,KAAKC,MAAMH,EAAa,GAAb,WAC1B3C,KAAQ2C,EAAa,GAAb,WACR3D,YAAe2D,EAAa,GAAb,QAA2B,GAA3B,KACfjE,mBAAsBiE,EAAa,GAAb,QAA2B,GAA3B,cAM1BI,oBAAqB,SAASC,GAC5B,IAAMC,EAAO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE5EC,EAAW,GACXC,EAAc,GAgBlB,OAdAH,EAAqBI,QAAQ,SAAAC,GAC3B,IAAIC,EAAkB,IAAIC,KAAwB,IAAnBF,EAAcG,IACzCC,EAAcH,EAAgBI,UAC9BpF,EAAagF,EAAgBK,SAC7BC,EAAiBX,EAAK3E,GAEtBmF,IAAgBN,GAClBD,EAASU,GAAkB,CAACC,eAAkB,CAACR,IAC/CH,EAASU,GAAT,IAAkCX,EAAK3E,IAEvC4E,EAASU,GAAT,eAA2CE,KAAKT,GAElDF,EAAcM,IAETP,GAGTa,oCAAqC,SAASpB,GAC5C,IAAIqB,EAAoBrB,EAAasB,IAAI,SAAAC,GACvC,OAAOrB,KAAKC,MAAMoB,EAAGC,KAAKC,QAQ5B,MAL2B,CACzBC,IAAOxB,KAAKwB,IAALC,MAAAzB,KAAI0B,OAAAC,EAAA,EAAAD,CAAQP,IACnBS,IAAO5B,KAAK4B,IAALH,MAAAzB,KAAI0B,OAAAC,EAAA,EAAAD,CAAQP,MAMvBU,oBAAqB,SAAS/E,GAAsC,IAAnBgD,EAAmBgC,UAAAC,OAAA,QAAAhC,IAAA+B,UAAA,GAAAA,UAAA,GAAJ,GAC9D,OAAQhF,GACN,IAAK,oBACH,IAAIkF,EAAqB,GAQzB,OAPAlC,EAAaS,QAAQ,SAAAc,GACnB,IAAIY,EAAO,IAAIvB,KAAa,IAARW,EAAGV,IAAWuB,WAClCF,EAAmBf,KAAK,CACtBgB,KAAQA,EACRE,MAASnC,KAAKC,MAAMoB,EAAGC,KAAKC,UAGzBS,EACT,IAAK,iBACH,IAAII,EAAiB,GAQrB,OAPAtC,EAAaS,QAAQ,SAAAc,GACnB,IAAIY,EAAO,IAAIvB,KAAa,IAARW,EAAGV,IAAWuB,WAClCE,EAAenB,KAAK,CAClBgB,KAAQA,EACRE,MAASd,EAAGC,KAAKrE,aAGdmF,EACT,IAAK,aACH,IAAIC,EAAa,GAQjB,OAPAvC,EAAaS,QAAQ,SAAAc,GACnB,IAAIY,EAAO,IAAIvB,KAAa,IAARW,EAAGV,IAAWuB,WAClCG,EAAWpB,KAAK,CACdgB,KAAQA,EACRE,MAASd,EAAGlE,KAAKmF,UAGdD,EACT,QACE,MAAO,mNCrFbE,MAAQ,CACNzF,kBAAmB,yGAiBAJ,GACnBE,KAAK4F,SAAS,CACZ1F,kBAAmBJ,qCAKrB,IAAII,EAAoBF,KAAK2F,MAAMzF,kBAC/BrB,EAAamB,KAAKC,MAAMpB,WACxBsB,EACF0C,EAAkBI,2BACEjD,KAAKC,MAAM4F,oBAAoBzB,gBAEjDtF,EAAc,CAChBS,YAAaY,EAAsB,YACnClB,mBAAoBkB,EAAsB,oBAExC2F,EAAkB9F,KAAKC,MAAM6F,gBAC7BC,EACFlD,EAAkBoC,oBACE/E,EACAF,KAAKC,MAAM4F,oBAAoBzB,gBAG/C4B,EAAuBhG,KAAKgG,qBAAqBjF,KAAKf,MAE5D,OACEd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6G,EAAD,CACErH,SAAUkH,EACVjH,WAAYA,EACZC,YAAaA,IAEfI,EAAAC,EAAAC,cAAC8G,EAAD,CACE/F,uBAAwBA,EACxBJ,cAAeiG,EACf9F,kBAAmBA,IAErBhB,EAAAC,EAAAC,cAAC+G,EAAD,CACEjF,oBAAqB6E,EACrB7F,kBAAmBA,YA3DAc,eAYpBxB,aAAe,CACpBX,WAAY,GACZiH,gBAAiB,GACjB3F,uBAAwB,GACxB0F,oBAAqB,eCjBJO,wLAeLC,IAGZC,EAFiBtG,KAAKC,MAAMqG,UACdtG,KAAKC,MAAMsG,WACTF,oCAIhB,IACMA,EAAUrG,KAAKC,MAAMoG,QACrBG,EAAWxG,KAAKC,MAAMuG,SAGtBC,EAAmBzG,KAAKC,MAAMwG,iBAC9B9G,EAAU8G,EAAiBrC,eAAe,GAAGsC,QAAQ,GAAGC,KACxDC,EAAe/D,EAAkByB,oCAAoCmC,EAAiBrC,gBAE5F,OACElF,EAAAC,EAAAC,cAAA,OAAKE,UAAWkH,EAAWK,wBAVV,iBAWXhG,QAASb,KAAKc,cAAcC,KAAKf,KAAMqG,IAC3CnH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,2BACbJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,IACbjB,EAAegI,EAAQS,OAAO,EAAG,MAGtC5H,EAAAC,EAAAC,cAAA,OAAKqB,IAAKf,EAAeC,GACrBL,UAAU,wBACVoB,IAAI,sBACRxB,EAAAC,EAAAC,cAAA,QAAME,UAAU,gDACbsH,EAAa5B,IADhB,QAGA9F,EAAAC,EAAAC,cAAA,QAAME,UAAU,kDACbsH,EAAahC,IADhB,gBA7CoC5D,aAAvBoF,EAUZ5G,aAAe,CACpBiH,iBAAkB,GAClBJ,QAAS,qNCdXV,MAAQ,CACNoB,SAAU,8EAOAC,EAAOC,GACjBjH,KAAK4F,SAAS,CACZmB,SAAUC,IAGZhH,KAAKC,MAAMiH,cAAcD,oCAIzB,IAAMF,EAAW/G,KAAK2F,MAAMoB,SACtBI,EAAcnH,KAAKmH,YAAYpG,KAAKf,MAGpCoH,EAAmBpH,KAAKC,MAAMmH,iBAC9BC,EAAkBvC,OAAOwC,KAAKF,GAAkB5C,IAAI,SAAS+C,EAAKP,GACtE,OAAO9H,EAAAC,EAAAC,cAACoI,EAAD,CACGjB,WAAYS,EACZX,QAASkB,EACTd,iBAAkBW,EAAiBG,GACnCA,IAAKP,EACLR,SAAUQ,IAAUD,EACpBT,SAAUa,MAGtB,OACEjI,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACGgI,WApCkBrG,aCGRyG,6MACnB9B,MAAQ,CACN9B,iBAAiB,IAAIC,MAAO4D,UAC5B5B,gBAAiB,GACjB3F,uBAAwB,GACxBiH,iBAAkB,MAqCpBF,cAAgB,SAACD,GACfU,EAAK/B,SAAS,CACZ/G,WAAYoI,EACZ9G,uBAAwBwH,EAAKhC,MAAMyB,iBAAiBH,yFAlCpC,IAAAW,EAAA5H,KACZwD,EAAO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAM5E3E,EAAa,IAAIiF,KAAK9D,KAAK2F,MAAM9B,iBAAiBK,SAClDmC,EAAU7C,EAAK3E,GACnBgJ,IACGC,IAAIC,kHACJC,KAAK,SAAAC,GACJ,IAAIC,EAAiBD,EAAS7G,KAC1B0E,EAAkBjD,EAAkBC,mBAAmBoF,GACvDd,EAAmBvE,EAAkBS,oBACC4E,EAAeC,MAErDhI,EAAyBiH,EAAiBf,GAC9CuB,EAAKhC,SACH,CACEsC,eAAgBA,EAChBpC,gBAAiBA,EACjB3F,uBAAwBA,EACxBiH,iBAAkBA,EAClBvI,WAAY2E,EAAK3E,OAItBuJ,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,sCAW9B,IAAIxJ,EAAamB,KAAK2F,MAAM9G,WAEtBuI,EAAmBpH,KAAK2F,MAAMyB,iBAC9BtB,EAAkB9F,KAAK2F,MAAMG,gBAC7B3F,EAAyBH,KAAK2F,MAAMxF,uBAC1C,OACEjB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAACoJ,EAAD,CACE3J,WAAYA,EACZiH,gBAAiBA,EACjB3F,uBAAwBA,EACxB0F,oBAAqBuB,EAAiBvI,KAExCK,EAAAC,EAAAC,cAACqJ,EAAD,CACE5J,WAAYA,EACZqI,cAAelH,KAAKkH,cAEpBE,iBAAkBpH,KAAK2F,MAAMyB,2BAnEGpG,aAArByG,EASZjI,aAAe,cCbHkJ,mLAEjB,OACExJ,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,iCAJ4B4B,aCiBrB2H,mLAXX,OACEzJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACwJ,EAAD,MACA1J,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACyJ,EAAD,eANQ7H,aCIE8H,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlK,EAAAC,EAAAC,cAACiK,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.b0b9430b.chunk.js","sourcesContent":["export const capitalizeText = function(string) \n{\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Col, Row } from 'reactstrap';\n\nimport { capitalizeText } from '../../utils/capitalizeText';\nimport './OverallInfo.css';\n\nOverallInfo.defaultProps = {\n  cityInfo: {},\n  currentDay: '',\n  descritpion: {}\n}\n\nfunction OverallInfo({ cityInfo, currentDay, description }) {\n  OverallInfo.propTypes = {\n    cityInfo: PropTypes.object.isRequired,\n    currentDay: PropTypes.string.isRequired,\n    description: PropTypes.object.isRequired\n  }\n  const cityName = cityInfo['name'];\n  const country = cityInfo['country'];\n  const weatherDescription = description\n  return (\n    <Row>\n      <Col>\n        <h2 className=\"city-info\">{cityName}, {country}</h2>\n        <p>{capitalizeText(currentDay)}</p>\n        <p>{weatherDescription.weatherMain}, {weatherDescription.weatherDescription}</p>\n      </Col>\n    </Row>\n  )\n}\n\n\n\nexport default OverallInfo\n\n","export const createImageUrl = function(imgCode)\n{ \n  let imageUrl = \"https://openweathermap.org/img/w/_type_.png\"\n  return imageUrl.replace('_type_', imgCode)\n}\n","import React , { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, ButtonGroup, Col, Row } from 'reactstrap';\n\nimport { createImageUrl } from '../../utils/createImageUrl';\nimport './DetailedInfo.css';\n\nexport default class DetailedInfo extends Component {\n  static propTypes = {\n    activeButtonChart: PropTypes.string.isRequired,\n    currentDateTimeWeather: PropTypes.object.isRequired,\n    onButtonClick: PropTypes.func.isRequired,\n  }\n  static defaultProps = {\n    activeButtonChart: '',\n    currentDateTimeWeather: {}\n  }\n\n  handleOnClick(buttonName) {\n    const onButtonClick = this.props.onButtonClick\n    onButtonClick(buttonName)\n  }\n\n  render() {\n    let activeButtonChart = this.props.activeButtonChart\n    let currentDateTimeWeather = this.props.currentDateTimeWeather\n    let humidity = currentDateTimeWeather['humidity']\n    let imgCode = currentDateTimeWeather['imgCode']\n    let pressure = currentDateTimeWeather['pressure']\n    let temperature = currentDateTimeWeather['temperature']\n    let wind = currentDateTimeWeather['wind']\n\n    return (\n      <Row className=\"detailedInfo\">\n        <Col xs=\"6\">\n          <img className=\"detailedInfo__image\" \n              src={createImageUrl(imgCode)}\n              alt=\"weather-thumbnail\"\n          >\n          </img>\n          <div className=\"detailedInfo__temperatureBlock\">\n            <span className=\"detailedInfo__currentTemperature\">{temperature}</span>\n            <span className=\"detailedInfo__units\">&deg;C | &deg;F</span>\n          </div>\n        </Col>\n        <Col xs=\"6\">\n          <div className=\"detailedInfo__details\">    \n            <p>Humidity: {humidity} %</p>\n            <p>Pressure: {pressure} hPa</p>\n            <p>Wind: {wind} mps</p>\n            <ButtonGroup>\n              <Button className={activeButtonChart === 'temperatureButton' ? 'active' : '' }\n                      name=\"temperatureButton\"\n                      size=\"sm\"\n                      onClick={this.handleOnClick.bind(this, 'temperatureButton')}>\n                Temperature\n              </Button>\n              <Button className={activeButtonChart === 'pressureButton' ? 'active' : '' }\n                      name=\"pressureButton\"\n                      size=\"sm\"\n                      onClick={this.handleOnClick.bind(this, 'pressureButton')}>\n                Pressure\n              </Button>\n              <Button className={activeButtonChart === 'windButton' ? 'active' : ''}\n                      name=\"windButton\"\n                      size=\"sm\"\n                      onClick={this.handleOnClick.bind(this, 'windButton')}>\n                Wind\n              </Button>\n            </ButtonGroup>\n          </div>\n        </Col>\n      </Row>\n    )\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { AreaChart, Area, XAxis } from 'recharts';\n\nDailyChart.propTypes = {\n  activeButtonChart: PropTypes.string.isRequired,\n  selectedDateWeather: PropTypes.array.isRequired,\n}\n\nfunction DailyChart({ selectedDateWeather, activeButtonChart }) {\n  const setChartFillColor = ({activeButtonChart}) => {\n    switch (activeButtonChart) {\n      case 'temperatureButton':\n        return 'rgba(255, 204, 0, 0.2)'\n      case 'pressureButton':\n        return 'rgba(255, 204, 0, 0.2)'\n      case 'windButton':\n        return 'rgba(255, 204, 0, 0.2)'\n      default:\n        return 'rgba(255, 204, 0, 0.2)'\n    }\n  }\n  \n  return (\n    <div>\n      <AreaChart \n        data={selectedDateWeather}\n        height={120} \n        margin={{ top: 25 }}\n        width={600} \n      >\n        <XAxis\n          axisLine={false}\n          dataKey=\"hour\"\n          interval=\"preserveStartEnd\"\n          padding={{ left: 25, right: 25 }}\n          minTickGap={0}\n          tickLine={false}\n          tick={{\n            stroke: '#bababa',\n            fontSize: 10,\n          }}\n        />\n        <Area\n          animationDuration={500}\n          animationEasing='ease-in'\n          dataKey='value' \n          fill='rgba(255, 204, 0, 0.2)'\n          label={{ \n            fill: '#bababa',\n            fontSize: '12',\n            position: 'top'\n          }}\n          stroke='#ffcc00' \n          strokeWidth='2' \n          type='monotone' \n        />\n      </AreaChart>\n    </div>\n  )\n}\n\nexport default DailyChart\n","const WeatherDataParser = {\n  getCityOverallInfo: function(jsonData) {\n    return {\n      \"name\": jsonData.city.name,\n      \"country\": jsonData.city.country\n    }\n  },\n\n  getCurrentTimeDailyWeather: function(hourlyArrays) {\n    if (hourlyArrays === undefined) {\n      return {}\n    }\n    \n    let weather = {\n      \"imgCode\": hourlyArrays[0]['weather'][0]['icon'],\n      \"humidity\": hourlyArrays[0]['main']['humidity'],\n      \"pressure\": hourlyArrays[0]['main']['pressure'],\n      \"temperature\": Math.round(hourlyArrays[0]['main']['temp']),\n      \"wind\": hourlyArrays[0]['wind']['speed'],\n      \"weatherMain\": hourlyArrays[0]['weather'][0]['main'],\n      \"weatherDescription\": hourlyArrays[0]['weather'][0]['description'],\n    }\n\n    return weather;\n  },\n\n  getFiveDaysForecast: function(fiveDayForecastArray) {\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let forecast = {}\n    let previousDay = ''\n\n    fiveDayForecastArray.forEach(dailyForecast => {\n      let currentDateTime = new Date(dailyForecast.dt * 1000)\n      let currentDate = currentDateTime.getDate()\n      let currentDay = currentDateTime.getDay()\n      let currentDayName = days[currentDay]\n\n      if (currentDate !== previousDay) {\n        forecast[currentDayName] = {'hourlyForecast': [dailyForecast]}\n        forecast[currentDayName]['day'] = days[currentDay]\n      } else {\n        forecast[currentDayName]['hourlyForecast'].push(dailyForecast)\n      }\n      previousDay = currentDate\n    })\n    return forecast;\n  },\n\n  getMinAndMaxTemperatureForPassedDay: function(hourlyArrays) {\n    let dailyTemperatures = hourlyArrays.map(el => {\n      return Math.round(el.main.temp)\n    })\n\n    let minAndMaxtemperature = {\n      'min': Math.min(...dailyTemperatures),\n      'max': Math.max(...dailyTemperatures),\n    }\n    \n    return minAndMaxtemperature\n  },\n\n  prepareDataForChart: function(activeButtonChart, hourlyArrays = []) {\n    switch (activeButtonChart) {\n      case 'temperatureButton': \n        let hourlyTemperatures = [] \n        hourlyArrays.forEach(el => {\n          let hour = new Date(el.dt * 1000).getHours()\n          hourlyTemperatures.push({\n            'hour': hour,\n            'value': Math.round(el.main.temp)\n          })\n        })\n        return hourlyTemperatures\n      case 'pressureButton': \n        let hourlyPressure = [] \n        hourlyArrays.forEach(el => {\n          let hour = new Date(el.dt * 1000).getHours()\n          hourlyPressure.push({\n            'hour': hour,\n            'value': el.main.pressure\n          })\n        })\n        return hourlyPressure\n      case 'windButton': \n        let hourlyWind = [] \n        hourlyArrays.forEach(el => {\n          let hour = new Date(el.dt * 1000).getHours()\n          hourlyWind.push({\n            'hour': hour,\n            'value': el.wind.speed\n          })\n        })\n        return hourlyWind\n      default:\n        return {}\n    }\n  }\n}\n\nexport default WeatherDataParser","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport './index.css';\nimport OverallInfo from './OverallInfo';\nimport DetailedInfo from './DetailedInfo';\nimport DailyChart from './DailyChart';\nimport WeatherDataParser from '../../services/WeatherDataParser';\n\nexport default class extends Component {\n  state = {\n    activeButtonChart: 'temperatureButton'\n  }\n\n  static propTypes = {\n    currentDay: PropTypes.string.isRequired,\n    overallCityInfo: PropTypes.object.isRequired,\n    currentDateTimeWeather: PropTypes.object.isRequired,\n    selectedDayForecast: PropTypes.object.isRequired\n  }\n\n  static defaultProps = {\n    currentDay: '',\n    overallCityInfo: {},\n    currentDateTimeWeather: {},\n    selectedDayForecast: {}\n  }\n\n  setActiveButtonChart(buttonName) {\n    this.setState({\n      activeButtonChart: buttonName,\n    })\n  }\n\n  render() {\n    let activeButtonChart = this.state.activeButtonChart\n    let currentDay = this.props.currentDay\n    let currentDateTimeWeather = \n      WeatherDataParser.getCurrentTimeDailyWeather(\n                          this.props.selectedDayForecast.hourlyForecast\n                        )\n    let description = { \n      weatherMain: currentDateTimeWeather['weatherMain'],\n      weatherDescription: currentDateTimeWeather['weatherDescription']\n    }\n    let overallCityInfo = this.props.overallCityInfo\n    let selectedDateChartData = \n      WeatherDataParser.prepareDataForChart(\n                          activeButtonChart,\n                          this.props.selectedDayForecast.hourlyForecast\n                        )\n    \n    const setActiveButtonChart = this.setActiveButtonChart.bind(this)\n\n    return(\n      <div>\n        <OverallInfo \n          cityInfo={overallCityInfo}\n          currentDay={currentDay}\n          description={description}\n        />\n        <DetailedInfo \n          currentDateTimeWeather={currentDateTimeWeather}\n          onButtonClick={setActiveButtonChart}\n          activeButtonChart={activeButtonChart}\n        />\n        <DailyChart \n          selectedDateWeather={selectedDateChartData}\n          activeButtonChart={activeButtonChart}\n        />\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './SingleDayBlock.css';\nimport { capitalizeText } from '../../utils/capitalizeText';\nimport { createImageUrl } from '../../utils/createImageUrl';\nimport WeatherDataParser from '../../services/WeatherDataParser';\n\nexport default class SingleDayBlock extends Component {\n  // Declare propTypes as static properties as early as possible\n  static propTypes = {\n    dailyWeatherInfo: PropTypes.object.isRequired,\n    dayName: PropTypes.string.isRequired,\n    isActive: PropTypes.bool,\n    onSelect: PropTypes.func.isRequired,\n  }\n\n  // Default props below propTypes\n  static defaultProps = {\n    dailyWeatherInfo: {},\n    dayName: ''\n  }\n\n  handleOnClick(dayName) {\n    const onSelect = this.props.onSelect\n    const index = this.props.blockIndex\n    onSelect(index, dayName)\n  }\n\n  render() {\n    const blockClass = 'singleDayBlock'\n    const dayName = this.props.dayName\n    const isActive = this.props.isActive\n\n    //api\n    const dailyWeatherInfo = this.props.dailyWeatherInfo\n    const imgCode = dailyWeatherInfo.hourlyForecast[0].weather[0].icon\n    const temperatures = WeatherDataParser.getMinAndMaxTemperatureForPassedDay(dailyWeatherInfo.hourlyForecast)\n\n    return (\n      <div className={isActive ? blockClass + ' active' : blockClass}\n            onClick={this.handleOnClick.bind(this, dayName)}>\n        <div className=\"singleDayBlock__dayName\">\n          <span className=\"\">\n            {capitalizeText(dayName.substr(0, 3))}\n          </span>\n        </div>\n        <img src={createImageUrl(imgCode)} \n            className=\"singleDayBlock__image\"\n            alt=\"weather type icon\"/>\n        <span className=\"singleDayBlock__temp singleDayBlock--dayTemp\">\n          {temperatures.max}&deg;\n        </span>\n        <span className=\"singleDayBlock__temp singleDayBlock--nightTemp\">\n          {temperatures.min}&deg;\n        </span>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Col, Row } from 'reactstrap';\nimport SingleDayBlock from './SingleDayBlock';\n\nexport default class extends Component {\n  state = {\n    activeId: 0\n  }\n  \n  static propTypes = {\n    fiveDaysForecast: PropTypes.object.isRequired\n  }\n\n  onDaySelect(index, selectedDay) {\n    this.setState({\n      activeId: index\n    });\n\n    this.props.setCurrentDay(selectedDay);\n  }\n\n  render() {\n    const activeId = this.state.activeId;\n    const onDaySelect = this.onDaySelect.bind(this)\n\n    //api\n    const fiveDaysForecast = this.props.fiveDaysForecast\n    const SingleDaysBlock = Object.keys(fiveDaysForecast).map(function(key, index) {\n      return <SingleDayBlock \n                blockIndex={index}\n                dayName={key}\n                dailyWeatherInfo={fiveDaysForecast[key]}\n                key={index}\n                isActive={index === activeId}\n                onSelect={onDaySelect}\n                />\n    })\n    return (\n      <Row>\n        <Col>\n          {SingleDaysBlock}\n        </Col>\n      </Row>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios';\n\nimport './WeatherBlock.css';\nimport DailyWeatherBlock from './DailyWeatherBlock';\nimport WeatherDataParser from '../services/WeatherDataParser';\nimport WeeklyWeatherList from './WeeklyWeatherList';\n\nexport default class WeatherBlock extends Component {\n  state = {\n    currentDateTime: new Date().getTime(),\n    overallCityInfo: {},\n    currentDateTimeWeather: {},\n    fiveDaysForecast: {},\n  }\n\n  static propTypes = {}\n  static defaultProps = {}\n  \n  componentDidMount() {\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    const forecast5 = 'http://api.openweathermap.org/data/2.5/forecast?id='\n    const barcelonaId = '6356055'\n    const units = '&units=metric'\n    const apiKey = 'a23d2967a22cfa9a510a2c630aa76206'\n    \n    let currentDay = new Date(this.state.currentDateTime).getDay()\n    let dayName = days[currentDay]\n    axios\n      .get(forecast5 + barcelonaId + \"&APPID=\" + apiKey + units)\n      .then(response => {\n        let apiWeatherData = response.data\n        let overallCityInfo = WeatherDataParser.getCityOverallInfo(apiWeatherData)\n        let fiveDaysForecast = WeatherDataParser.getFiveDaysForecast(\n                                                  apiWeatherData.list\n                                                )\n        let currentDateTimeWeather = fiveDaysForecast[dayName]\n        this.setState(\n          { \n            apiWeatherData: apiWeatherData,\n            overallCityInfo: overallCityInfo,\n            currentDateTimeWeather: currentDateTimeWeather,\n            fiveDaysForecast: fiveDaysForecast,\n            currentDay: days[currentDay]\n          }\n        )\n      })\n      .catch(error => console.log(error));     \n  }\n\n  setCurrentDay = (selectedDay) => {\n    this.setState({\n      currentDay: selectedDay,\n      currentDateTimeWeather: this.state.fiveDaysForecast[selectedDay]\n    })\n  }\n\n  render() {\n    let currentDay = this.state.currentDay\n    //api data\n    const fiveDaysForecast = this.state.fiveDaysForecast\n    const overallCityInfo = this.state.overallCityInfo\n    const currentDateTimeWeather = this.state.currentDateTimeWeather\n    return(\n      <div className=\"weather-block\">\n        <DailyWeatherBlock \n          currentDay={currentDay}\n          overallCityInfo={overallCityInfo}\n          currentDateTimeWeather={currentDateTimeWeather}\n          selectedDayForecast={fiveDaysForecast[currentDay]}\n        />\n        <WeeklyWeatherList \n          currentDay={currentDay}\n          setCurrentDay={this.setCurrentDay}\n          //api\n          fiveDaysForecast={this.state.fiveDaysForecast}\n        />\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\n\nimport './Header.css';\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <header>\n        <h1>Weather app</h1>\n      </header>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { Container } from 'reactstrap';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport WeatherBlock from '../components/WeatherBlock';\nimport Header from '../components/Header';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Container>\n          <WeatherBlock />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["utils/createImageUrl.jsx","components/DailyWeatherBlock/DetailedInfo.jsx","components/DailyWeatherBlock/DailyChart.jsx","utils/capitalizeText.jsx","components/DailyWeatherBlock/OverallInfo.jsx","components/Search.jsx","services/WeatherDataParser.jsx","components/DailyWeatherBlock/index.jsx","components/Header.jsx","components/WeeklyWeatherList/SingleDayBlock.jsx","components/WeeklyWeatherList/index.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["createImageUrl","imgCode","replace","DetailedInfo","buttonName","onButtonClick","this","props","activeButtonChart","currentDateTimeWeather","humidity","pressure","temperature","wind","react_default","a","createElement","reactstrap_es","className","xs","src","alt","name","size","onClick","handleOnClick","bind","Component","defaultProps","DailyChart","_ref","selectedDateWeather","setChartFillColor","fill","stroke","AreaChart","data","height","margin","top","width","XAxis","axisLine","dataKey","interval","padding","left","right","minTickGap","tickLine","tick","fontSize","Area","animationDuration","animationEasing","label","position","strokeWidth","type","capitalizeText","string","charAt","toUpperCase","slice","OverallInfo","cityName","cityInfo","country","currentDay","weatherDescription","description","weatherMain","descritpion","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","CityListJson","filter","city","getSuggestionValue","suggestion","id","renderSuggestion","WeatherDataParser","getCityOverallInfo","jsonData","getCurrentTimeDailyWeather","hourlyArrays","undefined","Math","round","getFiveDaysForecast","fiveDayForecastArray","days","forecast","previousDay","forEach","dailyForecast","currentDateTime","Date","dt","currentDate","getDate","getDay","currentDayName","hourlyForecast","push","getMinAndMaxTemperatureForPassedDay","dailyTemperatures","map","el","main","temp","min","apply","Object","toConsumableArray","max","prepareDataForChart","arguments","hourlyTemperatures","hour","getHours","hourlyPressure","hourlyWind","speed","state","setState","selectedDayForecast","overallCityInfo","selectedDateChartData","setActiveButtonChart","OverallInfo_OverallInfo","DetailedInfo_DetailedInfo","DailyWeatherBlock_DailyChart","Header","SingleDayBlock","dayName","onSelect","blockIndex","isActive","dailyWeatherInfo","weather","icon","temperatures","blockClass","substr","activeId","index","selectedDay","setCurrentDay","onDaySelect","fiveDaysForecast","SingleDaysBlock","keys","key","SingleDayBlock_SingleDayBlock","forecast5link","apiKey","units","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","cityId","getTime","getOpenWeatherData","axios","get","then","response","apiWeatherData","list","catch","error","console","log","setCityId","selectedCityId","assertThisInitialized","prevProps","prevState","Header_Header","components_DailyWeatherBlock_default","WeeklyWeatherList_default","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c1ae1ac1.chunk.js","sourcesContent":["export const createImageUrl = function(imgCode)\n{ \n  let imageUrl = \"https://openweathermap.org/img/w/_type_.png\"\n  return imageUrl.replace('_type_', imgCode)\n}\n","import React , { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, ButtonGroup, Col, Row } from 'reactstrap';\n\nimport { createImageUrl } from '../../utils/createImageUrl';\nimport './DetailedInfo.css';\n\nexport default class DetailedInfo extends Component {\n  static propTypes = {\n    activeButtonChart: PropTypes.string.isRequired,\n    currentDateTimeWeather: PropTypes.object.isRequired,\n    onButtonClick: PropTypes.func.isRequired,\n  }\n  static defaultProps = {\n    activeButtonChart: '',\n    currentDateTimeWeather: {}\n  }\n\n  handleOnClick(buttonName) {\n    const onButtonClick = this.props.onButtonClick\n    onButtonClick(buttonName)\n  }\n\n  render() {\n    let activeButtonChart = this.props.activeButtonChart\n    let currentDateTimeWeather = this.props.currentDateTimeWeather\n    let humidity = currentDateTimeWeather['humidity']\n    let imgCode = currentDateTimeWeather['imgCode']\n    let pressure = currentDateTimeWeather['pressure']\n    let temperature = currentDateTimeWeather['temperature']\n    let wind = currentDateTimeWeather['wind']\n\n    return (\n      <Row className=\"detailedInfo\">\n        <Col xs=\"6\">\n          <img className=\"detailedInfo__image\" \n              src={createImageUrl(imgCode)}\n              alt=\"weather-thumbnail\"\n          >\n          </img>\n          <div className=\"detailedInfo__temperatureBlock\">\n            <span className=\"detailedInfo__currentTemperature\">{temperature}</span>\n            <span className=\"detailedInfo__units\">&deg;C | &deg;F</span>\n          </div>\n        </Col>\n        <Col xs=\"6\">\n          <div className=\"detailedInfo__details\">    \n            <p>Humidity: {humidity} %</p>\n            <p>Pressure: {pressure} hPa</p>\n            <p>Wind: {wind} mps</p>\n            <ButtonGroup>\n              <Button className={activeButtonChart === 'temperatureButton' ? 'active' : '' }\n                      name=\"temperatureButton\"\n                      size=\"sm\"\n                      onClick={this.handleOnClick.bind(this, 'temperatureButton')}>\n                Temperature\n              </Button>\n              <Button className={activeButtonChart === 'pressureButton' ? 'active' : '' }\n                      name=\"pressureButton\"\n                      size=\"sm\"\n                      onClick={this.handleOnClick.bind(this, 'pressureButton')}>\n                Pressure\n              </Button>\n              <Button className={activeButtonChart === 'windButton' ? 'active' : ''}\n                      name=\"windButton\"\n                      size=\"sm\"\n                      onClick={this.handleOnClick.bind(this, 'windButton')}>\n                Wind\n              </Button>\n            </ButtonGroup>\n          </div>\n        </Col>\n      </Row>\n    )\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { AreaChart, Area, XAxis } from 'recharts';\n\nDailyChart.propTypes = {\n  activeButtonChart: PropTypes.string.isRequired,\n  selectedDateWeather: PropTypes.array.isRequired,\n}\n\nfunction DailyChart({ selectedDateWeather, activeButtonChart }) {\n  const setChartFillColor = () => {\n    switch (activeButtonChart) {\n      case 'temperatureButton':\n        return {\n          'fill': 'rgba(255, 204, 0, 0.2)',\n          'stroke': '#ffcc00'\n        }\n      case 'pressureButton':\n        return {\n          'fill': 'rgba(0, 97, 255, 0.2)',\n          'stroke': '#0092ff'\n        }\n      case 'windButton':\n        return {\n          'fill': 'rgba(138, 141, 146, 0.4)',\n          'stroke': '#65696F'\n        }\n      default:\n        return {\n          'fill': 'rgba(255, 204, 0, 0.2)',\n          'stroke': '#ffcc00'\n        }\n    }\n  }\n  \n  return (\n    <div>\n      <AreaChart \n        data={selectedDateWeather}\n        height={120} \n        margin={{ top: 25 }}\n        width={600} \n      >\n        <XAxis\n          axisLine={false}\n          dataKey=\"hour\"\n          interval=\"preserveStartEnd\"\n          padding={{ left: 25, right: 25 }}\n          minTickGap={0}\n          tickLine={false}\n          tick={{\n            stroke: '#bababa',\n            fontSize: 10,\n          }}\n        />\n        <Area\n          animationDuration={500}\n          animationEasing='ease-in'\n          dataKey='value' \n          fill={setChartFillColor().fill}\n          label={{ \n            fill: '#bababa',\n            fontSize: '12',\n            position: 'top'\n          }}\n          stroke={setChartFillColor().stroke} \n          strokeWidth='2' \n          type='monotone' \n        />\n      </AreaChart>\n    </div>\n  )\n}\n\nexport default DailyChart\n","export const capitalizeText = function(string) \n{\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport { Col, Row } from 'reactstrap';\n\nimport { capitalizeText } from '../../utils/capitalizeText';\nimport './OverallInfo.css';\n\nexport default class OverallInfo extends Component {\n  static defaultProps = {\n    cityInfo: {},\n    currentDay: '',\n    descritpion: {}\n  }\n\n  static propTypes = {\n    cityInfo: PropTypes.object.isRequired,\n    currentDay: PropTypes.string.isRequired,\n    description: PropTypes.object.isRequired,\n  }\n\n  render () {\n    let cityName = this.props.cityInfo.name\n    let country = this.props.cityInfo.country;\n    let currentDay = this.props.currentDay;\n    let weatherDescription = this.props.description\n\n    return (\n      <Row className=\"overallInfo\">\n        <Col>\n          <h2 className=\"city-info\">{cityName}, {country}</h2>\n          <p>{capitalizeText(currentDay)}</p>\n          <p>{weatherDescription.weatherMain}, {weatherDescription.weatherDescription}</p>\n        </Col>\n      </Row>\n    )\n  }\n}\n\n\n\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Autosuggest from 'react-autosuggest';\n\nimport './Search.css';\nimport CityListJson from '../containers/city.list.min.json'\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  if (inputLength < 3) {\n    return [];\n  } else if (inputLength >= 3) {\n    return CityListJson.filter(city =>\n            city.name.toLowerCase().slice(0, inputLength) === inputValue\n          )\n  };\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.name + ', ' + suggestion.id;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n  <div>\n    {suggestion.name}, {suggestion.country}\n  </div>\n);\n\nexport default class Search extends Component {\n  state = {\n    cityId: '',\n    value: '',\n    suggestions: []\n  }\n\n  static propTypes = {\n    setCityId: PropTypes.func.isRequired\n  }\n\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  onChange = (e, { newValue }) => {\n    const setCityId = this.props.setCityId\n\n    this.setState({\n      value: newValue,\n    })\n\n    if (newValue.match(/[a-zA-Z]+,\\s\\d+/)){\n      let cityId = newValue.match(/\\d+/)[0]\n      this.setState({\n        cityId: cityId\n      })\n      setCityId(cityId)\n    }\n\n  }\n\n  removeCityIdFromString (value) {\n    if (value.match(/[a-zA-Z]+,\\s\\d+/)) {\n      return value.match(/[a-zA-Z]+/)[0]\n    } else {\n      return value\n    }\n  }\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: 'Type a city',\n      value: this.removeCityIdFromString(value),\n      onChange: this.onChange,\n    };\n\n    return (\n      <>\n        <Autosuggest\n          suggestions={suggestions}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          getSuggestionValue={getSuggestionValue}\n          renderSuggestion={renderSuggestion}\n          inputProps={inputProps}\n        />\n      </>\n    )\n  }\n}\n","const WeatherDataParser = {\n  getCityOverallInfo: function(jsonData) {\n    return {\n      \"name\": jsonData.city.name,\n      \"country\": jsonData.city.country\n    }\n  },\n\n  getCurrentTimeDailyWeather: function(hourlyArrays) {\n    if (hourlyArrays === undefined) {\n      return {}\n    }\n    \n    let weather = {\n      \"imgCode\": hourlyArrays[0]['weather'][0]['icon'],\n      \"humidity\": hourlyArrays[0]['main']['humidity'],\n      \"pressure\": hourlyArrays[0]['main']['pressure'],\n      \"temperature\": Math.round(hourlyArrays[0]['main']['temp']),\n      \"wind\": hourlyArrays[0]['wind']['speed'],\n      \"weatherMain\": hourlyArrays[0]['weather'][0]['main'],\n      \"weatherDescription\": hourlyArrays[0]['weather'][0]['description'],\n    }\n\n    return weather;\n  },\n\n  getFiveDaysForecast: function(fiveDayForecastArray) {\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let forecast = {}\n    let previousDay = ''\n\n    fiveDayForecastArray.forEach(dailyForecast => {\n      let currentDateTime = new Date(dailyForecast.dt * 1000)\n      let currentDate = currentDateTime.getDate()\n      let currentDay = currentDateTime.getDay()\n      let currentDayName = days[currentDay]\n\n      if (currentDate !== previousDay) {\n        forecast[currentDayName] = {'hourlyForecast': [dailyForecast]}\n        forecast[currentDayName]['day'] = days[currentDay]\n      } else {\n        forecast[currentDayName]['hourlyForecast'].push(dailyForecast)\n      }\n      previousDay = currentDate\n    })\n    return forecast;\n  },\n\n  getMinAndMaxTemperatureForPassedDay: function(hourlyArrays) {\n    let dailyTemperatures = hourlyArrays.map(el => {\n      return Math.round(el.main.temp)\n    })\n\n    let minAndMaxtemperature = {\n      'min': Math.min(...dailyTemperatures),\n      'max': Math.max(...dailyTemperatures),\n    }\n    \n    return minAndMaxtemperature\n  },\n\n  prepareDataForChart: function(activeButtonChart, hourlyArrays = []) {\n    switch (activeButtonChart) {\n      case 'temperatureButton': \n        let hourlyTemperatures = [] \n        hourlyArrays.forEach(el => {\n          let hour = new Date(el.dt * 1000).getHours()\n          hourlyTemperatures.push({\n            'hour': hour,\n            'value': Math.round(el.main.temp)\n          })\n        })\n        return hourlyTemperatures\n      case 'pressureButton': \n        let hourlyPressure = [] \n        hourlyArrays.forEach(el => {\n          let hour = new Date(el.dt * 1000).getHours()\n          hourlyPressure.push({\n            'hour': hour,\n            'value': el.main.pressure\n          })\n        })\n        return hourlyPressure\n      case 'windButton': \n        let hourlyWind = [] \n        hourlyArrays.forEach(el => {\n          let hour = new Date(el.dt * 1000).getHours()\n          hourlyWind.push({\n            'hour': hour,\n            'value': el.wind.speed\n          })\n        })\n        return hourlyWind\n      default:\n        return {}\n    }\n  }\n}\n\nexport default WeatherDataParser","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport './index.css';\nimport DetailedInfo from './DetailedInfo';\nimport DailyChart from './DailyChart';\nimport OverallInfo from './OverallInfo';\nimport Search from '../Search';\nimport WeatherDataParser from '../../services/WeatherDataParser';\n\nexport default class extends Component {\n  state = {\n    activeButtonChart: 'temperatureButton'\n  }\n\n  static propTypes = {\n    currentDay: PropTypes.string.isRequired,\n    overallCityInfo: PropTypes.object.isRequired,\n    currentDateTimeWeather: PropTypes.object.isRequired,\n    selectedDayForecast: PropTypes.object.isRequired,\n    setCityId: PropTypes.func.isRequired\n  }\n\n  static defaultProps = {\n    currentDay: '',\n    overallCityInfo: {},\n    currentDateTimeWeather: {},\n    selectedDayForecast: {}\n  }\n\n  setActiveButtonChart(buttonName) {\n    this.setState({\n      activeButtonChart: buttonName,\n    })\n  }\n\n  render() {\n    let activeButtonChart = this.state.activeButtonChart\n    let currentDay = this.props.currentDay\n    let currentDateTimeWeather = \n      WeatherDataParser.getCurrentTimeDailyWeather(\n                          this.props.selectedDayForecast.hourlyForecast\n                        )\n    let description = { \n      weatherMain: currentDateTimeWeather['weatherMain'],\n      weatherDescription: currentDateTimeWeather['weatherDescription']\n    }\n    let overallCityInfo = this.props.overallCityInfo\n    let selectedDateChartData = \n      WeatherDataParser.prepareDataForChart(\n                          activeButtonChart,\n                          this.props.selectedDayForecast.hourlyForecast\n                        )\n    \n    const setActiveButtonChart = this.setActiveButtonChart.bind(this)\n    return(\n      <div>\n        <OverallInfo \n          cityInfo={overallCityInfo}\n          currentDay={currentDay}\n          description={description}\n        />\n        {/* <Search setCityId={this.props.setCityId}/> */}\n        <DetailedInfo \n          currentDateTimeWeather={currentDateTimeWeather}\n          onButtonClick={setActiveButtonChart}\n          activeButtonChart={activeButtonChart}\n        />\n        <DailyChart \n          selectedDateWeather={selectedDateChartData}\n          activeButtonChart={activeButtonChart}\n        />\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\n\nimport './Header.css';\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <header>\n        <h1>Weather app</h1>\n      </header>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './SingleDayBlock.css';\nimport { capitalizeText } from '../../utils/capitalizeText';\nimport { createImageUrl } from '../../utils/createImageUrl';\nimport WeatherDataParser from '../../services/WeatherDataParser';\n\nexport default class SingleDayBlock extends Component {\n  // Declare propTypes as static properties as early as possible\n  static propTypes = {\n    dailyWeatherInfo: PropTypes.object.isRequired,\n    dayName: PropTypes.string.isRequired,\n    isActive: PropTypes.bool,\n    onSelect: PropTypes.func.isRequired,\n  }\n\n  // Default props below propTypes\n  static defaultProps = {\n    dailyWeatherInfo: {},\n    dayName: ''\n  }\n\n  handleOnClick(dayName) {\n    const onSelect = this.props.onSelect\n    const index = this.props.blockIndex\n    onSelect(index, dayName)\n  }\n\n  render() {\n    const blockClass = 'singleDayBlock'\n    const dayName = this.props.dayName\n    const isActive = this.props.isActive\n\n    //api\n    const dailyWeatherInfo = this.props.dailyWeatherInfo\n    const imgCode = dailyWeatherInfo.hourlyForecast[0].weather[0].icon\n    const temperatures = WeatherDataParser.getMinAndMaxTemperatureForPassedDay(dailyWeatherInfo.hourlyForecast)\n\n    return (\n      <div className={isActive ? blockClass + ' active' : blockClass}\n            onClick={this.handleOnClick.bind(this, dayName)}>\n        <div className=\"singleDayBlock__dayName\">\n          <span className=\"\">\n            {capitalizeText(dayName.substr(0, 3))}\n          </span>\n        </div>\n        <img src={createImageUrl(imgCode)} \n            className=\"singleDayBlock__image\"\n            alt=\"weather type icon\"/>\n        <span className=\"singleDayBlock__temp singleDayBlock--dayTemp\">\n          {temperatures.max}&deg;\n        </span>\n        <span className=\"singleDayBlock__temp singleDayBlock--nightTemp\">\n          {temperatures.min}&deg;\n        </span>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Col, Row } from 'reactstrap';\nimport SingleDayBlock from './SingleDayBlock';\n\nexport default class extends Component {\n  state = {\n    activeId: 0\n  }\n  \n  static propTypes = {\n    fiveDaysForecast: PropTypes.object.isRequired\n  }\n\n  onDaySelect(index, selectedDay) {\n    this.setState({\n      activeId: index\n    });\n\n    this.props.setCurrentDay(selectedDay);\n  }\n\n  render() {\n    const activeId = this.state.activeId;\n    const onDaySelect = this.onDaySelect.bind(this)\n\n    //api\n    const fiveDaysForecast = this.props.fiveDaysForecast\n    const SingleDaysBlock = Object.keys(fiveDaysForecast).map(function(key, index) {\n      return <SingleDayBlock \n                blockIndex={index}\n                dayName={key}\n                dailyWeatherInfo={fiveDaysForecast[key]}\n                key={index}\n                isActive={index === activeId}\n                onSelect={onDaySelect}\n                />\n    })\n    return (\n      <Row>\n        <Col>\n          {SingleDaysBlock}\n        </Col>\n      </Row>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { Container } from 'reactstrap';\nimport axios from 'axios';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport DailyWeatherBlock from '../components/DailyWeatherBlock';\nimport Header from '../components/Header';\nimport WeatherDataParser from '../services/WeatherDataParser';\nimport WeeklyWeatherList from '../components/WeeklyWeatherList';\n\nconst days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nconst forecast5link = 'https://api.openweathermap.org/data/2.5/forecast?id='\nconst apiKey = 'a23d2967a22cfa9a510a2c630aa76206'\nconst units = '&units=metric'\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.setCityId.bind(this)\n  }\n\n  state = {\n    cityId: '3094802',\n    currentDateTime: new Date().getTime(),\n    overallCityInfo: {},\n    currentDateTimeWeather: {},\n    fiveDaysForecast: {},\n  }\n\n  static propTypes = {}\n  static defaultProps = {}\n\n  componentDidMount() {\n    this.getOpenWeatherData()     \n  }\n\n  getOpenWeatherData = () => {\n    let cityId = this.state.cityId\n    let currentDay = new Date(this.state.currentDateTime).getDay()\n    let dayName = days[currentDay]\n\n    axios\n      .get(forecast5link + cityId + \"&APPID=\" + apiKey + units)\n      .then(response => {\n        let apiWeatherData = response.data\n        let overallCityInfo = WeatherDataParser.getCityOverallInfo(apiWeatherData)\n        let fiveDaysForecast = WeatherDataParser.getFiveDaysForecast(\n                                                  apiWeatherData.list\n                                                )\n        let currentDateTimeWeather = fiveDaysForecast[dayName]\n        this.setState(\n          { \n            apiWeatherData: apiWeatherData,\n            overallCityInfo: overallCityInfo,\n            currentDateTimeWeather: currentDateTimeWeather,\n            fiveDaysForecast: fiveDaysForecast,\n            currentDay: days[currentDay]\n          }\n        )\n      })\n      .catch(error => console.log(error));\n  }\n\n  setCurrentDay = (selectedDay) => {\n    this.setState({\n      currentDay: selectedDay,\n      currentDateTimeWeather: this.state.fiveDaysForecast[selectedDay]\n    })\n  }\n\n  setCityId = (selectedCityId) => {\n    console.log(selectedCityId)\n    this.setState({\n      cityId: selectedCityId\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.cityId !== prevState.cityId) {\n      this.getOpenWeatherData();\n    }\n  }\n\n  render() {\n    let currentDay = this.state.currentDay\n    let fiveDaysForecast = this.state.fiveDaysForecast\n    let overallCityInfo = this.state.overallCityInfo\n    let currentDateTimeWeather = this.state.currentDateTimeWeather\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <Container>\n          <div className=\"weather-block\">\n            <DailyWeatherBlock \n              currentDay={currentDay}\n              overallCityInfo={overallCityInfo}\n              currentDateTimeWeather={currentDateTimeWeather}\n              selectedDayForecast={fiveDaysForecast[currentDay]}\n              setCityId={this.setCityId}\n            />\n            <WeeklyWeatherList \n              currentDay={currentDay}\n              setCurrentDay={this.setCurrentDay}\n              fiveDaysForecast={this.state.fiveDaysForecast}\n            />\n          </div>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}